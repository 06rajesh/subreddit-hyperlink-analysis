install.packages("scatterplot3d")
install.packages("htmlwidgets")
install.packages("sna")
install.packages("tsna")
library(scatterplot3d)
library(htmlwidgets)
library(sna)
library(tsna)
# install the relevant packages
# install.packages("scatterplot3d")
# install.packages("htmlwidgets")
# install.packages("sna")
# install.packages("tsna")
install.packages("ndtv")
# install the relevant packages
# install.packages("scatterplot3d")
# install.packages("htmlwidgets")
# install.packages("sna")
# install.packages("tsna")
install.packages("openssl")
install.packages("ndtv")
# install the relevant packages
# install.packages("scatterplot3d")
# install.packages("htmlwidgets")
# install.packages("sna")
# install.packages("tsna")
install.packages("openssl")
install.packages("ndtv")
library(ndtv)
install.packages("openssl")
install.packages("magick")
install.packages("animation")
setwd("~/Desktop/MS_Courses/Semester_4/Advanced_network_analysis_with_R/project/subreddit-network-analysis")
library(dplyr)
library(igraph)
library(RColorBrewer)
# We read the preproccessed 2014 reddits into R and look just at the first six rows.
subreddits.2014 <- read.csv("dataset/preprocessed.csv")
head(subreddits.2014)
## merge the same subreddit hyperlink rows and add the count
## on frequency column
subreddits_freq <- rename(count(subreddits.2014, from, to), Freq = n)
subreddits_filtered <- subreddits_freq[subreddits_freq$Freq > 30, ]
## merge the same subreddit hyperlink rows and add the count
## on frequency column
subreddits_freq <- rename(count(subreddits.2014, from, to), Freq = n)
View(subreddits_freq)
subreddits_filtered <- subreddits_freq[subreddits_freq$Freq > 30, ]
subreddits.matrix <- as.matrix(subreddits_filtered[, c(1, 2)])
head(subreddits.matrix)
# We now construct a graph object from this edge list; while it is
# certainly reasonable to model subreddits networks as directed graphs
# (with arrows pointing into the citing document), in our case it will
# be simpler and just as interesting to have an undirected graph.
G <- graph.edgelist(subreddits.matrix, directed=TRUE)
G # have a look at the graph
coul <- brewer.pal(12, "Set3")
# plotting the in degree of the network
deg <- degree(G, mode = "in")
sorted <- sort(deg, decreasing = TRUE)[1:50]
head(sorted)
barplot(sorted, las=2, name = names(sorted), cex.names = 0.7, col=coul )
# plotting the out degree
deg <- degree(G, mode = "out")
sorted <- sort(deg, decreasing = TRUE)[1:50]
head(sorted)
barplot(sorted, las=2, name = names(sorted), cex.names = 0.7, col=coul )
layOut <- layout_with_fr(G)
head(layOut) # We see it is a matrix, again.
## range projection
## project minimum and maximum degree to a
## vertex size range
OldMax <- max(deg)
OldMin <- min(deg)
NewMax <- 25
NewMin <- 5
degree_to_vertex <- function(degree) {
OldRange <- (OldMax - OldMin)
NewRange <- (NewMax - NewMin)
NewValue <- (((degree - OldMin) * NewRange) / OldRange) + NewMin
return(NewValue)
}
colorMax <- 1
colorMin <- 0.2
color_by_degree <- function(degree) {
OldRange <- (OldMax - OldMin)
NewRange <- (colorMax - colorMin)
NewValue <- (((degree - OldMin) * NewRange) / OldRange) + colorMin
return (rgb(1, 0, 0, NewValue))
}
plot.igraph(G,
layout=layOut,
vertex.size=degree_to_vertex(deg),
vertex.label.cex=0.25,
vertex.color=color_by_degree(deg),
edge.width=1,
edge.arrow.size=0.0,
)
eigenCent <- evcent(G)$vector
sorted <- sort(eigenCent, decreasing=TRUE)[1:25]
bins <- unique(quantile(sorted, seq(0,1,length.out = 50)))
vals <- cut(sorted, bins, labels=FALSE, include.lowest=TRUE)
colorVals <- rev(heat.colors(length(bins)))[vals]
barplot(sorted, las=2, name = names(sorted), cex.names = 0.7, col=colorVals )
bins <- unique(quantile(eigenCent, seq(0,1,length.out = 50)))
table(sorted)
sorted
sorted
betweenCent <- betweenness(G)
sorted <- sort(betweenCent, decreasing = TRUE)[1:25]
sorted
bins <- unique(quantile(sorted, seq(0.5,1,length.out = 50)))
vals <- cut(sorted, bins, labels=FALSE, include.lowest=TRUE)
colorVals <- rev(heat.colors(length(bins)))[vals]
barplot(sorted, las=2, name = names(sorted), cex.names = 0.7, col=colorVals )
eigenCent <- evcent(G)$vector
sorted <- sort(eigenCent, decreasing=TRUE)[1:25]
bins <- unique(quantile(sorted, seq(0,1,length.out = 50)))
vals <- cut(sorted, bins, labels=FALSE, include.lowest=TRUE)
colorVals <- rev(heat.colors(length(bins)))[vals]
barplot(sorted, las=2, name = names(sorted), cex.names = 0.7, col=colorVals )
sorted
